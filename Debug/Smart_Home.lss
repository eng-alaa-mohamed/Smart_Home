
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f4  00800060  000012fe  00001392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800254  00800254  00001586  2**0
                  ALLOC
  3 .stab         00001ff8  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137f  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_10>
      2c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 07 	call	0xec4	; 0xec4 <main>
      8a:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_16+0xa>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_u8StartConversionSynch>:


u8 ADC_u8BusyState = IDLE;

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16* Copy_pu16Reading)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8e 83       	std	Y+6, r24	; 0x06
      a8:	78 87       	std	Y+8, r23	; 0x08
      aa:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
      ac:	1a 82       	std	Y+2, r1	; 0x02
      ae:	1b 82       	std	Y+3, r1	; 0x03
      b0:	1c 82       	std	Y+4, r1	; 0x04
      b2:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState==IDLE)
      b8:	80 91 5f 02 	lds	r24, 0x025F
      bc:	88 23       	and	r24, r24
      be:	09 f0       	breq	.+2      	; 0xc2 <ADC_u8StartConversionSynch+0x30>
      c0:	5d c0       	rjmp	.+186    	; 0x17c <ADC_u8StartConversionSynch+0xea>
	{
		ADC_u8BusyState = BUSY;
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	80 93 5f 02 	sts	0x025F, r24
		/*Clear the MUX bits in ADMUX register*/
		ADMUX&= MUX_Clear;
      c8:	a7 e2       	ldi	r26, 0x27	; 39
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	e7 e2       	ldi	r30, 0x27	; 39
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	80 7e       	andi	r24, 0xE0	; 224
      d4:	8c 93       	st	X, r24
		/*Set the required channel into the MUX bits*/
		ADMUX|= Copy_u8Channel;  //need to update config file with all options
      d6:	a7 e2       	ldi	r26, 0x27	; 39
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e7 e2       	ldi	r30, 0x27	; 39
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	8e 81       	ldd	r24, Y+6	; 0x06
      e2:	89 2b       	or	r24, r25
      e4:	8c 93       	st	X, r24

		/*Start conversion */
		SET_BIT(ADCSRA,ADCSRA_ADSC);
      e6:	a6 e2       	ldi	r26, 0x26	; 38
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e6 e2       	ldi	r30, 0x26	; 38
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	8c 93       	st	X, r24
      f4:	0b c0       	rjmp	.+22     	; 0x10c <ADC_u8StartConversionSynch+0x7a>
		/*Polling (busy waiting) until the conversion complete flag is set -
		 * but this way doesn't consider the time-out problem, which may occur if ADC stopped for any reason*
		 * *Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT) )   //keep in this line while flag=0  means conversion did not happened yet
		{
			Local_u32Counter ++;
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	9b 81       	ldd	r25, Y+3	; 0x03
      fa:	ac 81       	ldd	r26, Y+4	; 0x04
      fc:	bd 81       	ldd	r27, Y+5	; 0x05
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	a1 1d       	adc	r26, r1
     102:	b1 1d       	adc	r27, r1
     104:	8a 83       	std	Y+2, r24	; 0x02
     106:	9b 83       	std	Y+3, r25	; 0x03
     108:	ac 83       	std	Y+4, r26	; 0x04
     10a:	bd 83       	std	Y+5, r27	; 0x05
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set -
		 * but this way doesn't consider the time-out problem, which may occur if ADC stopped for any reason*
		 * *Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT) )   //keep in this line while flag=0  means conversion did not happened yet
     10c:	e6 e2       	ldi	r30, 0x26	; 38
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	82 95       	swap	r24
     114:	8f 70       	andi	r24, 0x0F	; 15
     116:	88 2f       	mov	r24, r24
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	81 70       	andi	r24, 0x01	; 1
     11c:	90 70       	andi	r25, 0x00	; 0
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	61 f4       	brne	.+24     	; 0x13a <ADC_u8StartConversionSynch+0xa8>
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	9b 81       	ldd	r25, Y+3	; 0x03
     126:	ac 81       	ldd	r26, Y+4	; 0x04
     128:	bd 81       	ldd	r27, Y+5	; 0x05
     12a:	80 35       	cpi	r24, 0x50	; 80
     12c:	23 ec       	ldi	r18, 0xC3	; 195
     12e:	92 07       	cpc	r25, r18
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	a2 07       	cpc	r26, r18
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	b2 07       	cpc	r27, r18
     138:	f1 f6       	brne	.-68     	; 0xf6 <ADC_u8StartConversionSynch+0x64>
		{
			Local_u32Counter ++;
		}
		if (Local_u32Counter == ADC_u32TIMEOUT)   //loop is broken due to time out is reached
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	ac 81       	ldd	r26, Y+4	; 0x04
     140:	bd 81       	ldd	r27, Y+5	; 0x05
     142:	80 35       	cpi	r24, 0x50	; 80
     144:	23 ec       	ldi	r18, 0xC3	; 195
     146:	92 07       	cpc	r25, r18
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	a2 07       	cpc	r26, r18
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	b2 07       	cpc	r27, r18
     150:	19 f4       	brne	.+6      	; 0x158 <ADC_u8StartConversionSynch+0xc6>
		{
			Local_u8ErrorState=NOK;//as we need to return 2 things reading and error state as a result return reading by pointer
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	14 c0       	rjmp	.+40     	; 0x180 <ADC_u8StartConversionSynch+0xee>
		}
		else  //Loop is broken due to flag is raised
		{
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     158:	a6 e2       	ldi	r26, 0x26	; 38
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e6 e2       	ldi	r30, 0x26	; 38
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	80 61       	ori	r24, 0x10	; 16
     164:	8c 93       	st	X, r24
			/*Return the reading */
			if (Resolution == 8)
				*Copy_pu16Reading = ADCH;   //DC for 8bit
			else if (Resolution == 10)
				*Copy_pu16Reading = ADC;   //DC for 10bit
     166:	e4 e2       	ldi	r30, 0x24	; 36
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	91 81       	ldd	r25, Z+1	; 0x01
     16e:	ef 81       	ldd	r30, Y+7	; 0x07
     170:	f8 85       	ldd	r31, Y+8	; 0x08
     172:	91 83       	std	Z+1, r25	; 0x01
     174:	80 83       	st	Z, r24

			ADC_u8BusyState = IDLE;
     176:	10 92 5f 02 	sts	0x025F, r1
     17a:	02 c0       	rjmp	.+4      	; 0x180 <ADC_u8StartConversionSynch+0xee>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     17c:	84 e0       	ldi	r24, 0x04	; 4
     17e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     180:	89 81       	ldd	r24, Y+1	; 0x01
}
     182:	28 96       	adiw	r28, 0x08	; 8
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	cf 91       	pop	r28
     190:	df 91       	pop	r29
     192:	08 95       	ret

00000194 <ADC_u8StartConversionAsynch>:


u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16Reading, void(*Copy_pvNotificationFunc)(void))
{
     194:	df 93       	push	r29
     196:	cf 93       	push	r28
     198:	00 d0       	rcall	.+0      	; 0x19a <ADC_u8StartConversionAsynch+0x6>
     19a:	00 d0       	rcall	.+0      	; 0x19c <ADC_u8StartConversionAsynch+0x8>
     19c:	00 d0       	rcall	.+0      	; 0x19e <ADC_u8StartConversionAsynch+0xa>
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	7c 83       	std	Y+4, r23	; 0x04
     1a6:	6b 83       	std	Y+3, r22	; 0x03
     1a8:	5e 83       	std	Y+6, r21	; 0x06
     1aa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState==IDLE)
     1b0:	80 91 5f 02 	lds	r24, 0x025F
     1b4:	88 23       	and	r24, r24
     1b6:	d1 f5       	brne	.+116    	; 0x22c <ADC_u8StartConversionAsynch+0x98>
	{

		if((Copy_pu16Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	21 f0       	breq	.+8      	; 0x1c8 <ADC_u8StartConversionAsynch+0x34>
     1c0:	8d 81       	ldd	r24, Y+5	; 0x05
     1c2:	9e 81       	ldd	r25, Y+6	; 0x06
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	19 f4       	brne	.+6      	; 0x1ce <ADC_u8StartConversionAsynch+0x3a>
		{
			Local_u8ErrorState = NULL_POINTER;
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	89 83       	std	Y+1, r24	; 0x01
     1cc:	31 c0       	rjmp	.+98     	; 0x230 <ADC_u8StartConversionAsynch+0x9c>
		}
		else
		{
			/*Make ADC busy in order not to work until being idle*/
			ADC_u8BusyState = BUSY;   /*Adding this variable protected the function and make it reentrant function*/
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 5f 02 	sts	0x025F, r24
			/*make ISR Source: single channel Asynchronous*/
			ADC_u8ISRSource= SINGLE_CHANNEL_ASYNCH;
     1d4:	10 92 61 02 	sts	0x0261, r1
			/* Initialize the reading variable globally */
			ADC_pu16Reading = Copy_pu16Reading;
     1d8:	8b 81       	ldd	r24, Y+3	; 0x03
     1da:	9c 81       	ldd	r25, Y+4	; 0x04
     1dc:	90 93 57 02 	sts	0x0257, r25
     1e0:	80 93 56 02 	sts	0x0256, r24
			/* Initialize the callback notification function globally */
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     1e4:	8d 81       	ldd	r24, Y+5	; 0x05
     1e6:	9e 81       	ldd	r25, Y+6	; 0x06
     1e8:	90 93 59 02 	sts	0x0259, r25
     1ec:	80 93 58 02 	sts	0x0258, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX&= MUX_Clear;
     1f0:	a7 e2       	ldi	r26, 0x27	; 39
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e7 e2       	ldi	r30, 0x27	; 39
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	80 7e       	andi	r24, 0xE0	; 224
     1fc:	8c 93       	st	X, r24
			/*Set the required channel into the MUX bits*/
			ADMUX|= Copy_u8Channel;  //need to update config file with all options
     1fe:	a7 e2       	ldi	r26, 0x27	; 39
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	e7 e2       	ldi	r30, 0x27	; 39
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	90 81       	ld	r25, Z
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	89 2b       	or	r24, r25
     20c:	8c 93       	st	X, r24
			/*Start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     20e:	a6 e2       	ldi	r26, 0x26	; 38
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e6 e2       	ldi	r30, 0x26	; 38
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 64       	ori	r24, 0x40	; 64
     21a:	8c 93       	st	X, r24
			/* enable ADC interrupt */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     21c:	a6 e2       	ldi	r26, 0x26	; 38
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e6 e2       	ldi	r30, 0x26	; 38
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	8c 93       	st	X, r24
     22a:	02 c0       	rjmp	.+4      	; 0x230 <ADC_u8StartConversionAsynch+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     230:	89 81       	ldd	r24, Y+1	; 0x01
}
     232:	26 96       	adiw	r28, 0x06	; 6
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource==SINGLE_CHANNEL_ASYNCH)
     26e:	80 91 61 02 	lds	r24, 0x0261
     272:	88 23       	and	r24, r24
     274:	c9 f4       	brne	.+50     	; 0x2a8 <__vector_16+0x64>
	{
		/*Read ADC result*/
		if (Resolution == 8)
			*ADC_pu16Reading = ADCH;   //DC for 8bit
		else if (Resolution == 10)
			*ADC_pu16Reading = ADC;   //DC for 10bit
     276:	a0 91 56 02 	lds	r26, 0x0256
     27a:	b0 91 57 02 	lds	r27, 0x0257
     27e:	e4 e2       	ldi	r30, 0x24	; 36
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	8d 93       	st	X+, r24
     288:	9c 93       	st	X, r25

		/*Make ADC state be IDLE due to finishing conversion*/
		ADC_u8BusyState = IDLE;
     28a:	10 92 5f 02 	sts	0x025F, r1
		/*Invoke the Callback notification function */
		ADC_pvCallBackNotificationFunc();  //to notify the user (main.c) that Digital reading is ready
     28e:	e0 91 58 02 	lds	r30, 0x0258
     292:	f0 91 59 02 	lds	r31, 0x0259
     296:	09 95       	icall
		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     298:	a6 e2       	ldi	r26, 0x26	; 38
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	e6 e2       	ldi	r30, 0x26	; 38
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	87 7f       	andi	r24, 0xF7	; 247
     2a4:	8c 93       	st	X, r24
     2a6:	55 c0       	rjmp	.+170    	; 0x352 <__vector_16+0x10e>
	}
	else if(ADC_u8ISRSource==CHAIN_ASYNCH)
     2a8:	80 91 61 02 	lds	r24, 0x0261
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <__vector_16+0x6e>
     2b0:	50 c0       	rjmp	.+160    	; 0x352 <__vector_16+0x10e>
	{
        /* Read the current conversion */
       ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;    //for 8-bitresolution #if could be done for the 2 resolutions
     2b2:	20 91 5c 02 	lds	r18, 0x025C
     2b6:	30 91 5d 02 	lds	r19, 0x025D
     2ba:	80 91 5e 02 	lds	r24, 0x025E
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	d9 01       	movw	r26, r18
     2c8:	a8 0f       	add	r26, r24
     2ca:	b9 1f       	adc	r27, r25
     2cc:	e5 e2       	ldi	r30, 0x25	; 37
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	11 96       	adiw	r26, 0x01	; 1
     2d8:	9c 93       	st	X, r25
     2da:	8e 93       	st	-X, r24
       ADC_u8ChainConversionIndex++;  //increment index
     2dc:	80 91 5e 02 	lds	r24, 0x025E
     2e0:	8f 5f       	subi	r24, 0xFF	; 255
     2e2:	80 93 5e 02 	sts	0x025E, r24
       /*check whether chain is finished or not */
       if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
     2e6:	90 91 5e 02 	lds	r25, 0x025E
     2ea:	80 91 60 02 	lds	r24, 0x0260
     2ee:	98 17       	cp	r25, r24
     2f0:	79 f4       	brne	.+30     	; 0x310 <__vector_16+0xcc>
       {
    	   /*Chain is finished */
    	   ADC_u8BusyState = IDLE;   /*ADC is now IDLE */
     2f2:	10 92 5f 02 	sts	0x025F, r1

    	   /* Invoke the callback of notification function */
    	   ADC_pvCallBackNotificationFunc();  /*this pointer to function could be changed to get u8 as input argument instead
     2f6:	e0 91 58 02 	lds	r30, 0x0258
     2fa:	f0 91 59 02 	lds	r31, 0x0259
     2fe:	09 95       	icall
    	   /* of void and pass ADCH value to it and in this case remove *result from struct
    	    * - in main.c get ADC value through this function*/
    	   /*Disable ADC conversion complete interrupt */
    	   CLR_BIT(ADCSRA,ADCSRA_ADIE);
     300:	a6 e2       	ldi	r26, 0x26	; 38
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	e6 e2       	ldi	r30, 0x26	; 38
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	8c 93       	st	X, r24
     30e:	21 c0       	rjmp	.+66     	; 0x352 <__vector_16+0x10e>
       }
       else
       {
           /*Chain is not finished*/
    	   /*Set new required channel */
    	   ADMUX&= MUX_Clear; /*Clear the MUX bits in ADMUX register 0b11100000*/
     310:	a7 e2       	ldi	r26, 0x27	; 39
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e7 e2       	ldi	r30, 0x27	; 39
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	80 7e       	andi	r24, 0xE0	; 224
     31c:	8c 93       	st	X, r24
    	   /*Set the required channel into the MUX bits*/
		   ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];  //need to update config file with all options
     31e:	a7 e2       	ldi	r26, 0x27	; 39
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e7 e2       	ldi	r30, 0x27	; 39
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	40 81       	ld	r20, Z
     328:	20 91 5a 02 	lds	r18, 0x025A
     32c:	30 91 5b 02 	lds	r19, 0x025B
     330:	80 91 5e 02 	lds	r24, 0x025E
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	e8 0f       	add	r30, r24
     33c:	f9 1f       	adc	r31, r25
     33e:	80 81       	ld	r24, Z
     340:	84 2b       	or	r24, r20
     342:	8c 93       	st	X, r24
		   /*Start conversion*/
		   SET_BIT(ADCSRA,ADCSRA_ADSC);
     344:	a6 e2       	ldi	r26, 0x26	; 38
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e6 e2       	ldi	r30, 0x26	; 38
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 64       	ori	r24, 0x40	; 64
     350:	8c 93       	st	X, r24
       }
	}
}
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	ff 91       	pop	r31
     358:	ef 91       	pop	r30
     35a:	bf 91       	pop	r27
     35c:	af 91       	pop	r26
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	7f 91       	pop	r23
     364:	6f 91       	pop	r22
     366:	5f 91       	pop	r21
     368:	4f 91       	pop	r20
     36a:	3f 91       	pop	r19
     36c:	2f 91       	pop	r18
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <ADC_voidInit>:


// ADC initiation function for pre-build configuration //
void ADC_voidInit(void)
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
#if (Reference_Voltage == AVCC)
	SET_BIT(ADMUX,ADMUX_REFS0);
     380:	a7 e2       	ldi	r26, 0x27	; 39
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	e7 e2       	ldi	r30, 0x27	; 39
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	80 64       	ori	r24, 0x40	; 64
     38c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     38e:	a7 e2       	ldi	r26, 0x27	; 39
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	e7 e2       	ldi	r30, 0x27	; 39
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	8f 77       	andi	r24, 0x7F	; 127
     39a:	8c 93       	st	X, r24
#endif

#if (Resolution == 8)  //Left Adjust Result
	SET_BIT(ADMUX,ADMUX_ADLAR);
#elif (Resolution == 10)
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     39c:	a7 e2       	ldi	r26, 0x27	; 39
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e7 e2       	ldi	r30, 0x27	; 39
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 7d       	andi	r24, 0xDF	; 223
     3a8:	8c 93       	st	X, r24
#else
#error "Wrong resolution"
#endif

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     3aa:	a6 e2       	ldi	r26, 0x26	; 38
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	e6 e2       	ldi	r30, 0x26	; 38
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	80 68       	ori	r24, 0x80	; 128
     3b6:	8c 93       	st	X, r24

	/*Set prescaler - These 3 bits determine the division factor between the XTAL frequency and the input clock to the ADC.*/
#if (ADC_PRESC==128)
	ADCSRA &= ADC_PRESC_MASK;    //clear first 3 bits of ADCSRA register
     3b8:	a6 e2       	ldi	r26, 0x26	; 38
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	e6 e2       	ldi	r30, 0x26	; 38
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	88 7f       	andi	r24, 0xF8	; 248
     3c4:	8c 93       	st	X, r24
	ADCSRA |= 128;
     3c6:	a6 e2       	ldi	r26, 0x26	; 38
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e6 e2       	ldi	r30, 0x26	; 38
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	8c 93       	st	X, r24
#endif

#if (ADC_INTERRUPT == 1)
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif (ADC_INTERRUPT == 0)
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     3d4:	a6 e2       	ldi	r26, 0x26	; 38
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e6 e2       	ldi	r30, 0x26	; 38
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	87 7f       	andi	r24, 0xF7	; 247
     3e0:	8c 93       	st	X, r24
#endif

#if Auto_Trigger_Enable == 1
	SET_BIT(ADCSRA,ADCSRA_ADATE);
#elif Auto_Trigger_Enable == 0
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     3e2:	a6 e2       	ldi	r26, 0x26	; 38
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	e6 e2       	ldi	r30, 0x26	; 38
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	8f 7d       	andi	r24, 0xDF	; 223
     3ee:	8c 93       	st	X, r24
#else
#error "Wrong selection"
#endif

#if (ADC_TRIG_SRC == 0)                  //ADC Trigger Source
	SFIOR &= TRIG_SOURCE_MASK;         //clear the last 3 bits SFIOR register
     3f0:	a0 e5       	ldi	r26, 0x50	; 80
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	e0 e5       	ldi	r30, 0x50	; 80
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 71       	andi	r24, 0x1F	; 31
     3fc:	8c 93       	st	X, r24
	SFIOR |= 0;
     3fe:	a0 e5       	ldi	r26, 0x50	; 80
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	e0 e5       	ldi	r30, 0x50	; 80
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8c 93       	st	X, r24
	SFIOR |= 7;
	//#else
	//#error "Wrong selection"
#endif

}
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <ADC_u8StartChainAsynch>:

/* Chain conversion to convert several analog signals at the same time using Asynchronous mode
 * Function argument is a struct defines in _interface file */
u8 ADC_u8StartChainAsynch(Chain_t* Copy_Chain)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	00 d0       	rcall	.+0      	; 0x416 <ADC_u8StartChainAsynch+0x6>
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	9b 83       	std	Y+3, r25	; 0x03
     41e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	89 83       	std	Y+1, r24	; 0x01
	/*check NULL pointer - if function argument is a pointer then check for null value  */
	if (Copy_Chain == NULL)
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	19 f4       	brne	.+6      	; 0x432 <ADC_u8StartChainAsynch+0x22>
	{
		Local_u8ErrorState= NULL_POINTER;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	55 c0       	rjmp	.+170    	; 0x4dc <ADC_u8StartChainAsynch+0xcc>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
     432:	80 91 5f 02 	lds	r24, 0x025F
     436:	88 23       	and	r24, r24
     438:	09 f0       	breq	.+2      	; 0x43c <ADC_u8StartChainAsynch+0x2c>
     43a:	4e c0       	rjmp	.+156    	; 0x4d8 <ADC_u8StartChainAsynch+0xc8>
		{
			ADC_u8BusyState = BUSY;   //make ADC busy
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 5f 02 	sts	0x025F, r24
			/*make ISR Source: Chain Asynchronous*/
			ADC_u8ISRSource= CHAIN_ASYNCH;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 61 02 	sts	0x0261, r24
			/* Initialize chain channel array - */
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;    //convert local variables (struct) to global variables
     448:	ea 81       	ldd	r30, Y+2	; 0x02
     44a:	fb 81       	ldd	r31, Y+3	; 0x03
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	90 93 5b 02 	sts	0x025B, r25
     454:	80 93 5a 02 	sts	0x025A, r24
			/* Initialize chain result array - */
			ADC_pu16ChainResultArr = Copy_Chain->Result;
     458:	ea 81       	ldd	r30, Y+2	; 0x02
     45a:	fb 81       	ldd	r31, Y+3	; 0x03
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	93 81       	ldd	r25, Z+3	; 0x03
     460:	90 93 5d 02 	sts	0x025D, r25
     464:	80 93 5c 02 	sts	0x025C, r24
			/* Initialize Chain size - */
			ADC_u8ChainSize = Copy_Chain->Size ;
     468:	ea 81       	ldd	r30, Y+2	; 0x02
     46a:	fb 81       	ldd	r31, Y+3	; 0x03
     46c:	84 81       	ldd	r24, Z+4	; 0x04
     46e:	80 93 60 02 	sts	0x0260, r24
			/*Initialize Notification function */
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc;
     472:	ea 81       	ldd	r30, Y+2	; 0x02
     474:	fb 81       	ldd	r31, Y+3	; 0x03
     476:	85 81       	ldd	r24, Z+5	; 0x05
     478:	96 81       	ldd	r25, Z+6	; 0x06
     47a:	90 93 59 02 	sts	0x0259, r25
     47e:	80 93 58 02 	sts	0x0258, r24

			/*Initialize current conversion index */
			ADC_u8ChainConversionIndex=0;
     482:	10 92 5e 02 	sts	0x025E, r1

			/*Set required channel */
			ADMUX&= MUX_Clear; /*Clear the MUX bits in ADMUX register 0b11100000*/
     486:	a7 e2       	ldi	r26, 0x27	; 39
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e7 e2       	ldi	r30, 0x27	; 39
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	80 7e       	andi	r24, 0xE0	; 224
     492:	8c 93       	st	X, r24
		    /*Set the required channel into the MUX bits*/
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];  //need to update config file with all options
     494:	a7 e2       	ldi	r26, 0x27	; 39
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	e7 e2       	ldi	r30, 0x27	; 39
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	40 81       	ld	r20, Z
     49e:	20 91 5a 02 	lds	r18, 0x025A
     4a2:	30 91 5b 02 	lds	r19, 0x025B
     4a6:	80 91 5e 02 	lds	r24, 0x025E
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	e8 0f       	add	r30, r24
     4b2:	f9 1f       	adc	r31, r25
     4b4:	80 81       	ld	r24, Z
     4b6:	84 2b       	or	r24, r20
     4b8:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     4ba:	a6 e2       	ldi	r26, 0x26	; 38
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e6 e2       	ldi	r30, 0x26	; 38
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	80 64       	ori	r24, 0x40	; 64
     4c6:	8c 93       	st	X, r24
			/*Enable conversion complete interrupt */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     4c8:	a6 e2       	ldi	r26, 0x26	; 38
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	e6 e2       	ldi	r30, 0x26	; 38
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	88 60       	ori	r24, 0x08	; 8
     4d4:	8c 93       	st	X, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <ADC_u8StartChainAsynch+0xcc>
		}
		else
		{
			Local_u8ErrorState= BUSY_FUNC;
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
}
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	08 95       	ret

000004ea <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	28 97       	sbiw	r28, 0x08	; 8
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	8a 83       	std	Y+2, r24	; 0x02
     500:	6b 83       	std	Y+3, r22	; 0x03
     502:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0; // no error
     504:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	88 30       	cpi	r24, 0x08	; 8
     50a:	08 f0       	brcs	.+2      	; 0x50e <DIO_u8SetPinValue+0x24>
     50c:	f4 c0       	rjmp	.+488    	; 0x6f6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	88 23       	and	r24, r24
     512:	09 f0       	breq	.+2      	; 0x516 <DIO_u8SetPinValue+0x2c>
     514:	77 c0       	rjmp	.+238    	; 0x604 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	28 2f       	mov	r18, r24
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	38 87       	std	Y+8, r19	; 0x08
     51e:	2f 83       	std	Y+7, r18	; 0x07
     520:	8f 81       	ldd	r24, Y+7	; 0x07
     522:	98 85       	ldd	r25, Y+8	; 0x08
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	91 05       	cpc	r25, r1
     528:	59 f1       	breq	.+86     	; 0x580 <DIO_u8SetPinValue+0x96>
     52a:	2f 81       	ldd	r18, Y+7	; 0x07
     52c:	38 85       	ldd	r19, Y+8	; 0x08
     52e:	22 30       	cpi	r18, 0x02	; 2
     530:	31 05       	cpc	r19, r1
     532:	2c f4       	brge	.+10     	; 0x53e <DIO_u8SetPinValue+0x54>
     534:	8f 81       	ldd	r24, Y+7	; 0x07
     536:	98 85       	ldd	r25, Y+8	; 0x08
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	69 f0       	breq	.+26     	; 0x556 <DIO_u8SetPinValue+0x6c>
     53c:	60 c0       	rjmp	.+192    	; 0x5fe <DIO_u8SetPinValue+0x114>
     53e:	2f 81       	ldd	r18, Y+7	; 0x07
     540:	38 85       	ldd	r19, Y+8	; 0x08
     542:	22 30       	cpi	r18, 0x02	; 2
     544:	31 05       	cpc	r19, r1
     546:	89 f1       	breq	.+98     	; 0x5aa <DIO_u8SetPinValue+0xc0>
     548:	8f 81       	ldd	r24, Y+7	; 0x07
     54a:	98 85       	ldd	r25, Y+8	; 0x08
     54c:	83 30       	cpi	r24, 0x03	; 3
     54e:	91 05       	cpc	r25, r1
     550:	09 f4       	brne	.+2      	; 0x554 <DIO_u8SetPinValue+0x6a>
     552:	40 c0       	rjmp	.+128    	; 0x5d4 <DIO_u8SetPinValue+0xea>
     554:	54 c0       	rjmp	.+168    	; 0x5fe <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     556:	ab e3       	ldi	r26, 0x3B	; 59
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	eb e3       	ldi	r30, 0x3B	; 59
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	48 2f       	mov	r20, r24
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	28 2f       	mov	r18, r24
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 2e       	mov	r0, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_u8SetPinValue+0x8a>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_u8SetPinValue+0x86>
     578:	80 95       	com	r24
     57a:	84 23       	and	r24, r20
     57c:	8c 93       	st	X, r24
     57e:	bd c0       	rjmp	.+378    	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     580:	a8 e3       	ldi	r26, 0x38	; 56
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e8 e3       	ldi	r30, 0x38	; 56
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	48 2f       	mov	r20, r24
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 2e       	mov	r0, r18
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_u8SetPinValue+0xb4>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	0a 94       	dec	r0
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_u8SetPinValue+0xb0>
     5a2:	80 95       	com	r24
     5a4:	84 23       	and	r24, r20
     5a6:	8c 93       	st	X, r24
     5a8:	a8 c0       	rjmp	.+336    	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     5aa:	a5 e3       	ldi	r26, 0x35	; 53
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	e5 e3       	ldi	r30, 0x35	; 53
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	48 2f       	mov	r20, r24
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	28 2f       	mov	r18, r24
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	02 2e       	mov	r0, r18
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8SetPinValue+0xde>
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8SetPinValue+0xda>
     5cc:	80 95       	com	r24
     5ce:	84 23       	and	r24, r20
     5d0:	8c 93       	st	X, r24
     5d2:	93 c0       	rjmp	.+294    	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     5d4:	a2 e3       	ldi	r26, 0x32	; 50
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e2 e3       	ldi	r30, 0x32	; 50
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	48 2f       	mov	r20, r24
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 2e       	mov	r0, r18
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8SetPinValue+0x108>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_u8SetPinValue+0x104>
     5f6:	80 95       	com	r24
     5f8:	84 23       	and	r24, r20
     5fa:	8c 93       	st	X, r24
     5fc:	7e c0       	rjmp	.+252    	; 0x6fa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;    //wrong port
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	7b c0       	rjmp	.+246    	; 0x6fa <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
     604:	8c 81       	ldd	r24, Y+4	; 0x04
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <DIO_u8SetPinValue+0x122>
     60a:	72 c0       	rjmp	.+228    	; 0x6f0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	28 2f       	mov	r18, r24
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	3e 83       	std	Y+6, r19	; 0x06
     614:	2d 83       	std	Y+5, r18	; 0x05
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	9e 81       	ldd	r25, Y+6	; 0x06
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	91 05       	cpc	r25, r1
     61e:	49 f1       	breq	.+82     	; 0x672 <DIO_u8SetPinValue+0x188>
     620:	2d 81       	ldd	r18, Y+5	; 0x05
     622:	3e 81       	ldd	r19, Y+6	; 0x06
     624:	22 30       	cpi	r18, 0x02	; 2
     626:	31 05       	cpc	r19, r1
     628:	2c f4       	brge	.+10     	; 0x634 <DIO_u8SetPinValue+0x14a>
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	61 f0       	breq	.+24     	; 0x64a <DIO_u8SetPinValue+0x160>
     632:	5b c0       	rjmp	.+182    	; 0x6ea <DIO_u8SetPinValue+0x200>
     634:	2d 81       	ldd	r18, Y+5	; 0x05
     636:	3e 81       	ldd	r19, Y+6	; 0x06
     638:	22 30       	cpi	r18, 0x02	; 2
     63a:	31 05       	cpc	r19, r1
     63c:	71 f1       	breq	.+92     	; 0x69a <DIO_u8SetPinValue+0x1b0>
     63e:	8d 81       	ldd	r24, Y+5	; 0x05
     640:	9e 81       	ldd	r25, Y+6	; 0x06
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	91 05       	cpc	r25, r1
     646:	e9 f1       	breq	.+122    	; 0x6c2 <DIO_u8SetPinValue+0x1d8>
     648:	50 c0       	rjmp	.+160    	; 0x6ea <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
     64a:	ab e3       	ldi	r26, 0x3B	; 59
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	eb e3       	ldi	r30, 0x3B	; 59
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	48 2f       	mov	r20, r24
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	28 2f       	mov	r18, r24
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 2e       	mov	r0, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_u8SetPinValue+0x17e>
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	0a 94       	dec	r0
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_u8SetPinValue+0x17a>
     66c:	84 2b       	or	r24, r20
     66e:	8c 93       	st	X, r24
     670:	44 c0       	rjmp	.+136    	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
     672:	a8 e3       	ldi	r26, 0x38	; 56
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e8 e3       	ldi	r30, 0x38	; 56
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	48 2f       	mov	r20, r24
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 2e       	mov	r0, r18
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8SetPinValue+0x1a6>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	0a 94       	dec	r0
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8SetPinValue+0x1a2>
     694:	84 2b       	or	r24, r20
     696:	8c 93       	st	X, r24
     698:	30 c0       	rjmp	.+96     	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
     69a:	a5 e3       	ldi	r26, 0x35	; 53
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e5 e3       	ldi	r30, 0x35	; 53
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	48 2f       	mov	r20, r24
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	28 2f       	mov	r18, r24
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_u8SetPinValue+0x1ce>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_u8SetPinValue+0x1ca>
     6bc:	84 2b       	or	r24, r20
     6be:	8c 93       	st	X, r24
     6c0:	1c c0       	rjmp	.+56     	; 0x6fa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
     6c2:	a2 e3       	ldi	r26, 0x32	; 50
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	e2 e3       	ldi	r30, 0x32	; 50
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	48 2f       	mov	r20, r24
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 2e       	mov	r0, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_u8SetPinValue+0x1f6>
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_u8SetPinValue+0x1f2>
     6e4:	84 2b       	or	r24, r20
     6e6:	8c 93       	st	X, r24
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;   //wrong port
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <DIO_u8SetPinValue+0x210>
			}
		}
		else
			Local_u8ErrorState=1;   //wrong direction
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8SetPinValue+0x210>
	}
	else
		Local_u8ErrorState=1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	28 96       	adiw	r28, 0x08	; 8
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_u8SetPortValue+0x6>
     714:	00 d0       	rcall	.+0      	; 0x716 <DIO_u8SetPortValue+0x8>
     716:	0f 92       	push	r0
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	8a 83       	std	Y+2, r24	; 0x02
     71e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0; // no error
     720:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	3d 83       	std	Y+5, r19	; 0x05
     72a:	2c 83       	std	Y+4, r18	; 0x04
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	9d 81       	ldd	r25, Y+5	; 0x05
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	91 05       	cpc	r25, r1
     734:	d1 f0       	breq	.+52     	; 0x76a <DIO_u8SetPortValue+0x5c>
     736:	2c 81       	ldd	r18, Y+4	; 0x04
     738:	3d 81       	ldd	r19, Y+5	; 0x05
     73a:	22 30       	cpi	r18, 0x02	; 2
     73c:	31 05       	cpc	r19, r1
     73e:	2c f4       	brge	.+10     	; 0x74a <DIO_u8SetPortValue+0x3c>
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	61 f0       	breq	.+24     	; 0x760 <DIO_u8SetPortValue+0x52>
     748:	1f c0       	rjmp	.+62     	; 0x788 <DIO_u8SetPortValue+0x7a>
     74a:	2c 81       	ldd	r18, Y+4	; 0x04
     74c:	3d 81       	ldd	r19, Y+5	; 0x05
     74e:	22 30       	cpi	r18, 0x02	; 2
     750:	31 05       	cpc	r19, r1
     752:	81 f0       	breq	.+32     	; 0x774 <DIO_u8SetPortValue+0x66>
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	9d 81       	ldd	r25, Y+5	; 0x05
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	91 05       	cpc	r25, r1
     75c:	81 f0       	breq	.+32     	; 0x77e <DIO_u8SetPortValue+0x70>
     75e:	14 c0       	rjmp	.+40     	; 0x788 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
     760:	eb e3       	ldi	r30, 0x3B	; 59
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	80 83       	st	Z, r24
     768:	11 c0       	rjmp	.+34     	; 0x78c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
     76a:	e8 e3       	ldi	r30, 0x38	; 56
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	80 83       	st	Z, r24
     772:	0c c0       	rjmp	.+24     	; 0x78c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
     774:	e5 e3       	ldi	r30, 0x35	; 53
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	80 83       	st	Z, r24
     77c:	07 c0       	rjmp	.+14     	; 0x78c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
     77e:	e2 e3       	ldi	r30, 0x32	; 50
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	80 83       	st	Z, r24
     786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;   //wrong port
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     78c:	89 81       	ldd	r24, Y+1	; 0x01

}
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	cf 91       	pop	r28
     79a:	df 91       	pop	r29
     79c:	08 95       	ret

0000079e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	28 97       	sbiw	r28, 0x08	; 8
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	8a 83       	std	Y+2, r24	; 0x02
     7b4:	6b 83       	std	Y+3, r22	; 0x03
     7b6:	5d 83       	std	Y+5, r21	; 0x05
     7b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0; // no error
     7ba:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
     7bc:	8c 81       	ldd	r24, Y+4	; 0x04
     7be:	9d 81       	ldd	r25, Y+5	; 0x05
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_u8GetPinValue+0x28>
     7c4:	78 c0       	rjmp	.+240    	; 0x8b6 <__stack+0x57>
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <DIO_u8GetPinValue+0x30>
     7cc:	74 c0       	rjmp	.+232    	; 0x8b6 <__stack+0x57>
	{
		switch (Copy_u8Port)
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	3f 83       	std	Y+7, r19	; 0x07
     7d6:	2e 83       	std	Y+6, r18	; 0x06
     7d8:	4e 81       	ldd	r20, Y+6	; 0x06
     7da:	5f 81       	ldd	r21, Y+7	; 0x07
     7dc:	41 30       	cpi	r20, 0x01	; 1
     7de:	51 05       	cpc	r21, r1
     7e0:	59 f1       	breq	.+86     	; 0x838 <DIO_u8GetPinValue+0x9a>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	9f 81       	ldd	r25, Y+7	; 0x07
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	91 05       	cpc	r25, r1
     7ea:	34 f4       	brge	.+12     	; 0x7f8 <DIO_u8GetPinValue+0x5a>
     7ec:	2e 81       	ldd	r18, Y+6	; 0x06
     7ee:	3f 81       	ldd	r19, Y+7	; 0x07
     7f0:	21 15       	cp	r18, r1
     7f2:	31 05       	cpc	r19, r1
     7f4:	69 f0       	breq	.+26     	; 0x810 <DIO_u8GetPinValue+0x72>
     7f6:	5c c0       	rjmp	.+184    	; 0x8b0 <__stack+0x51>
     7f8:	4e 81       	ldd	r20, Y+6	; 0x06
     7fa:	5f 81       	ldd	r21, Y+7	; 0x07
     7fc:	42 30       	cpi	r20, 0x02	; 2
     7fe:	51 05       	cpc	r21, r1
     800:	79 f1       	breq	.+94     	; 0x860 <__stack+0x1>
     802:	8e 81       	ldd	r24, Y+6	; 0x06
     804:	9f 81       	ldd	r25, Y+7	; 0x07
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <DIO_u8GetPinValue+0x70>
     80c:	3d c0       	rjmp	.+122    	; 0x888 <__stack+0x29>
     80e:	50 c0       	rjmp	.+160    	; 0x8b0 <__stack+0x51>
			{
			case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA, Copy_u8Pin); break;
     810:	e9 e3       	ldi	r30, 0x39	; 57
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_u8GetPinValue+0x8a>
     824:	55 95       	asr	r21
     826:	47 95       	ror	r20
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_u8GetPinValue+0x86>
     82c:	ca 01       	movw	r24, r20
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	ec 81       	ldd	r30, Y+4	; 0x04
     832:	fd 81       	ldd	r31, Y+5	; 0x05
     834:	80 83       	st	Z, r24
     836:	3e c0       	rjmp	.+124    	; 0x8b4 <__stack+0x55>
			case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB, Copy_u8Pin); break;
     838:	e6 e3       	ldi	r30, 0x36	; 54
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a9 01       	movw	r20, r18
     84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_u8GetPinValue+0xb2>
     84c:	55 95       	asr	r21
     84e:	47 95       	ror	r20
     850:	8a 95       	dec	r24
     852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_u8GetPinValue+0xae>
     854:	ca 01       	movw	r24, r20
     856:	81 70       	andi	r24, 0x01	; 1
     858:	ec 81       	ldd	r30, Y+4	; 0x04
     85a:	fd 81       	ldd	r31, Y+5	; 0x05
     85c:	80 83       	st	Z, r24
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
			case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC, Copy_u8Pin); break;
     860:	e3 e3       	ldi	r30, 0x33	; 51
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a9 01       	movw	r20, r18
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	55 95       	asr	r21
     876:	47 95       	ror	r20
     878:	8a 95       	dec	r24
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	ca 01       	movw	r24, r20
     87e:	81 70       	andi	r24, 0x01	; 1
     880:	ec 81       	ldd	r30, Y+4	; 0x04
     882:	fd 81       	ldd	r31, Y+5	; 0x05
     884:	80 83       	st	Z, r24
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <__stack+0x55>
			case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND, Copy_u8Pin); break;
     888:	e0 e3       	ldi	r30, 0x30	; 48
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	28 2f       	mov	r18, r24
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a9 01       	movw	r20, r18
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
     89c:	55 95       	asr	r21
     89e:	47 95       	ror	r20
     8a0:	8a 95       	dec	r24
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
     8a4:	ca 01       	movw	r24, r20
     8a6:	81 70       	andi	r24, 0x01	; 1
     8a8:	ec 81       	ldd	r30, Y+4	; 0x04
     8aa:	fd 81       	ldd	r31, Y+5	; 0x05
     8ac:	80 83       	st	Z, r24
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
			default: Local_u8ErrorState=1; break;   //wrong port
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <__stack+0x5f>
			}

	}
	else
		return Local_u8ErrorState=1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	89 83       	std	Y+1, r24	; 0x01
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	88 87       	std	Y+8, r24	; 0x08

}
     8be:	88 85       	ldd	r24, Y+8	; 0x08
     8c0:	28 96       	adiw	r28, 0x08	; 8
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <GIE_voidEnable>:
#include "GIE_register.h"



void GIE_voidEnable(void)
{
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     8da:	af e5       	ldi	r26, 0x5F	; 95
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	ef e5       	ldi	r30, 0x5F	; 95
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	80 68       	ori	r24, 0x80	; 128
     8e6:	8c 93       	st	X, r24
}
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	08 95       	ret

000008ee <GIE_voidDisable>:


void GIE_voidDisable(void)
{
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I); 
     8f6:	af e5       	ldi	r26, 0x5F	; 95
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	ef e5       	ldi	r30, 0x5F	; 95
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	8f 77       	andi	r24, 0x7F	; 127
     902:	8c 93       	st	X, r24
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	08 95       	ret

0000090a <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     912:	ea e3       	ldi	r30, 0x3A	; 58
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	83 ef       	ldi	r24, 0xF3	; 243
     918:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     91a:	e7 e3       	ldi	r30, 0x37	; 55
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     922:	e4 e3       	ldi	r30, 0x34	; 52
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
     92a:	e1 e3       	ldi	r30, 0x31	; 49
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	82 e3       	ldi	r24, 0x32	; 50
     930:	80 83       	st	Z, r24
	
	
	PORTA=PORTA_INITIAL_VALUE;
     932:	eb e3       	ldi	r30, 0x3B	; 59
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
     938:	e8 e3       	ldi	r30, 0x38	; 56
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
     93e:	e5 e3       	ldi	r30, 0x35	; 53
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
     944:	e2 e3       	ldi	r30, 0x32	; 50
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	10 82       	st	Z, r1
	
// Remove set pin direction and set port direction

}
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <TIMER0_voidInit>:
#include "TIMER_private.h"
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void) = NULL;
void TIMER0_voidInit(void)
{
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);

#elif Timer0_Mode == Fast_PWM
	/*Choose Fast_PWM mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
     958:	a3 e5       	ldi	r26, 0x53	; 83
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	e3 e5       	ldi	r30, 0x53	; 83
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	80 64       	ori	r24, 0x40	; 64
     964:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     966:	a3 e5       	ldi	r26, 0x53	; 83
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e3 e5       	ldi	r30, 0x53	; 83
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	88 60       	ori	r24, 0x08	; 8
     972:	8c 93       	st	X, r24
	//set prescaler value CLK=8//
	CLR_BIT(TCCR0,TCCR0_CS00);
     974:	a3 e5       	ldi	r26, 0x53	; 83
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e3 e5       	ldi	r30, 0x53	; 83
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	8e 7f       	andi	r24, 0xFE	; 254
     980:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     982:	a3 e5       	ldi	r26, 0x53	; 83
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	e3 e5       	ldi	r30, 0x53	; 83
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     990:	a3 e5       	ldi	r26, 0x53	; 83
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	e3 e5       	ldi	r30, 0x53	; 83
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8b 7f       	andi	r24, 0xFB	; 251
     99c:	8c 93       	st	X, r24
	if (PWM_Mode == Non_Inverting)
	{CLR_BIT(TCCR0,TCCR0_COM00);
     99e:	a3 e5       	ldi	r26, 0x53	; 83
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	e3 e5       	ldi	r30, 0x53	; 83
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 7e       	andi	r24, 0xEF	; 239
     9aa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);}
     9ac:	a3 e5       	ldi	r26, 0x53	; 83
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e3 e5       	ldi	r30, 0x53	; 83
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	8c 93       	st	X, r24
	else if (PWM_Mode == Inverting)
	{SET_BIT(TCCR0,TCCR0_COM00);
	SET_BIT(TCCR0,TCCR0_COM01);}

#endif
}
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <TIMER0_voidSetCompareMatchValue>:

/*function writes number in OCR0 the compare match value used for PWM*/
void TIMER0_voidSetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	0f 92       	push	r0
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Value;
     9cc:	ec e5       	ldi	r30, 0x5C	; 92
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	80 83       	st	Z, r24
}
     9d4:	0f 90       	pop	r0
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <TIMER0_u8SetCallBack>:


u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <TIMER0_u8SetCallBack+0x6>
     9e2:	0f 92       	push	r0
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	9b 83       	std	Y+3, r25	; 0x03
     9ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc!=NULL)
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	9b 81       	ldd	r25, Y+3	; 0x03
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	39 f0       	breq	.+14     	; 0xa06 <TIMER0_u8SetCallBack+0x2a>
		TIMER0_pvCallBackFunc= Copy_pvCallBackFunc;
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	9b 81       	ldd	r25, Y+3	; 0x03
     9fc:	90 93 63 02 	sts	0x0263, r25
     a00:	80 93 62 02 	sts	0x0262, r24
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <TIMER0_u8SetCallBack+0x2e>
	else
		Local_u8ErrorStatus=NULL_POINTER;
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <__vector_10>:

//ISR Timer/Counter0 compare match
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!= NULL)
     a42:	80 91 62 02 	lds	r24, 0x0262
     a46:	90 91 63 02 	lds	r25, 0x0263
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	29 f0       	breq	.+10     	; 0xa58 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
     a4e:	e0 91 62 02 	lds	r30, 0x0262
     a52:	f0 91 63 02 	lds	r31, 0x0263
     a56:	09 95       	icall
	}
}
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_11>:

//ISR Timer/Counter0 overflow
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!= NULL)
     aa8:	80 91 62 02 	lds	r24, 0x0262
     aac:	90 91 63 02 	lds	r25, 0x0263
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	29 f0       	breq	.+10     	; 0xabe <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();   //call timer0 function
     ab4:	e0 91 62 02 	lds	r30, 0x0262
     ab8:	f0 91 63 02 	lds	r31, 0x0263
     abc:	09 95       	icall
	}
}
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62

	/*select Timer1 mode >> mode: 14 - in this mode TOP value is configurable i.e it is not necessary to be 2^8 */
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     aec:	af e4       	ldi	r26, 0x4F	; 79
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	ef e4       	ldi	r30, 0x4F	; 79
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     afa:	af e4       	ldi	r26, 0x4F	; 79
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	ef e4       	ldi	r30, 0x4F	; 79
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	82 60       	ori	r24, 0x02	; 2
     b06:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     b08:	ae e4       	ldi	r26, 0x4E	; 78
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ee e4       	ldi	r30, 0x4E	; 78
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     b16:	ae e4       	ldi	r26, 0x4E	; 78
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	ee e4       	ldi	r30, 0x4E	; 78
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	80 61       	ori	r24, 0x10	; 16
     b22:	8c 93       	st	X, r24


	/* Select hardware action on OC1A PIN => Non-Inverting */
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
     b24:	af e4       	ldi	r26, 0x4F	; 79
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	ef e4       	ldi	r30, 0x4F	; 79
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 7b       	andi	r24, 0xBF	; 191
     b30:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
     b32:	af e4       	ldi	r26, 0x4F	; 79
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e4       	ldi	r30, 0x4F	; 79
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	8c 93       	st	X, r24
	/* Select hardware action on OC1B PIN => Non-Inverting */
	CLR_BIT(TCCR1A,TCCR1A_COM1B0);
     b40:	af e4       	ldi	r26, 0x4F	; 79
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	ef e4       	ldi	r30, 0x4F	; 79
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8f 7e       	andi	r24, 0xEF	; 239
     b4c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
     b4e:	af e4       	ldi	r26, 0x4F	; 79
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e4       	ldi	r30, 0x4F	; 79
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 62       	ori	r24, 0x20	; 32
     b5a:	8c 93       	st	X, r24
	/* Set Top Value in ICR1 */
	//ICR1 = 19999;
	/* Set Angle of Servo Motor */
	//OCR1A = 999;   //Angle = 0    OCR1A = 1999 angle 180
	//set prescaler value CLK=8//
	CLR_BIT(TCCR1B,TCCR1B_CS10);
     b5c:	ae e4       	ldi	r26, 0x4E	; 78
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ee e4       	ldi	r30, 0x4E	; 78
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     b6a:	ae e4       	ldi	r26, 0x4E	; 78
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ee e4       	ldi	r30, 0x4E	; 78
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8b 7f       	andi	r24, 0xFB	; 251
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <TIMER1_voidSetCompareMatchValue>:

void TIMER1_voidSetCompareMatchValue(u16 Copy_u8OCR1AValue)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <TIMER1_voidSetCompareMatchValue+0x6>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u8OCR1AValue;
     b9a:	ea e4       	ldi	r30, 0x4A	; 74
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
}
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <USART_voidInit>:
#include "USART_interface.h"
#include "USART_config.h"

void UARTINT_voidSetCallBack(void(*Copy_pfun)(void));
void USART_voidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	/*Because UCSRC register can not be configured the regular way i.e. SET_BIT & CLR-BIT but it must
	 * be set once, so as a workaround, define a local variable and assign bits as required then equal
	 * this variable to the register */
	u8 Local_u8UCSRC_Value = 0;
     bba:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_u8UCSRC_Value,7);             //use UCSRC register (if zero, use UBRRH register)
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/*Asynchronous UART*/
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_UMSEL);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	8f 7b       	andi	r24, 0xBF	; 191
     bc6:	89 83       	std	Y+1, r24	; 0x01

	/*Select Parity to disable*/
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_UPM0);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7e       	andi	r24, 0xEF	; 239
     bcc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_UPM1);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	8f 7d       	andi	r24, 0xDF	; 223
     bd2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_USBS);   //1 stop bit
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	89 83       	std	Y+1, r24	; 0x01

	/*Set frame size to 8 bits*/
	SET_BIT(Local_u8UCSRC_Value,UCSRC_UCSZ1);  //set 1 to bit 8
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC_Value,UCSRC_UCSZ0);  //set 1 to bit 8
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Local_u8UCSRC_Value;
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	80 83       	st	Z, r24
	UBRRL=Baudrate;                   //baud rate = 9600 bit/sec
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	83 e3       	ldi	r24, 0x33	; 51
     bf4:	80 83       	st	Z, r24

	/*Enable Tx & Rx*/
	SET_BIT(UCSRB,UCSRB_RXEN);
     bf6:	aa e2       	ldi	r26, 0x2A	; 42
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ea e2       	ldi	r30, 0x2A	; 42
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 61       	ori	r24, 0x10	; 16
     c02:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	8c 93       	st	X, r24


}
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <USART_voidSend>:


void USART_voidSend(u8 Copy_u8data)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
	/*flag is raised when buffer register is ready to send data*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);  //Polling - wait until transmit buffer is empty -
     c26:	eb e2       	ldi	r30, 0x2B	; 43
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	82 95       	swap	r24
     c2e:	86 95       	lsr	r24
     c30:	87 70       	andi	r24, 0x07	; 7
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	81 70       	andi	r24, 0x01	; 1
     c38:	90 70       	andi	r25, 0x00	; 0
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	a1 f3       	breq	.-24     	; 0xc26 <USART_voidSend+0xc>
	UDR=Copy_u8data;
     c3e:	ec e2       	ldi	r30, 0x2C	; 44
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	80 83       	st	Z, r24
}
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <UART_Send_String>:

void UART_Send_String(char* st_pt)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <UART_Send_String+0x6>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <UART_Send_String+0x26>
	while(*st_pt)
		USART_voidSend(*st_pt++);
     c5e:	e9 81       	ldd	r30, Y+1	; 0x01
     c60:	fa 81       	ldd	r31, Y+2	; 0x02
     c62:	20 81       	ld	r18, Z
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	82 2f       	mov	r24, r18
     c70:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	UDR=Copy_u8data;
}

void UART_Send_String(char* st_pt)
{
	while(*st_pt)
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	80 81       	ld	r24, Z
     c7a:	88 23       	and	r24, r24
     c7c:	81 f7       	brne	.-32     	; 0xc5e <UART_Send_String+0x10>
		USART_voidSend(*st_pt++);
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <UART_Receive_String>:

void UART_Receive_String(u8 *command)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <UART_Receive_String+0x6>
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9b 83       	std	Y+3, r25	; 0x03
     c96:	8a 83       	std	Y+2, r24	; 0x02
	char counter=0;
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <UART_Receive_String+0x1a>
	while(*command)
	{
		counter++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_Receive_String(u8 *command)
{
	char counter=0;
	while(*command)
     ca2:	ea 81       	ldd	r30, Y+2	; 0x02
     ca4:	fb 81       	ldd	r31, Y+3	; 0x03
     ca6:	80 81       	ld	r24, Z
     ca8:	88 23       	and	r24, r24
     caa:	c1 f7       	brne	.-16     	; 0xc9c <UART_Receive_String+0x14>
	{
		counter++;
		//(command+counter) = USART_voidReceive();
	}

}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     cc0:	eb e2       	ldi	r30, 0x2B	; 43
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	dc f7       	brge	.-10     	; 0xcc0 <USART_u8Receive+0x8>
	return UDR;
     cca:	ec e2       	ldi	r30, 0x2C	; 44
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <USART_voidReceiveString>:


const char* USART_voidReceiveString(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <USART_voidReceiveString+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Counter=0;
     ce2:	1b 82       	std	Y+3, r1	; 0x03
	const char* Copy_pcString;
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     ce4:	eb e2       	ldi	r30, 0x2B	; 43
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	dc f7       	brge	.-10     	; 0xce4 <USART_voidReceiveString+0xe>
     cee:	0e c0       	rjmp	.+28     	; 0xd0c <USART_voidReceiveString+0x36>

	while(Copy_pcString[local_u8Counter]!= '\0')//an array containing the characters and terminated with a '\0' character
		//String is array of characters and last element is null character
	{
		USART_voidSend(Copy_pcString[local_u8Counter]);
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	80 81       	ld	r24, Z
     d02:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		local_u8Counter++;
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	8b 83       	std	Y+3, r24	; 0x03
{
	u8 local_u8Counter=0;
	const char* Copy_pcString;
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);

	while(Copy_pcString[local_u8Counter]!= '\0')//an array containing the characters and terminated with a '\0' character
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	39 f7       	brne	.-50     	; 0xcf0 <USART_voidReceiveString+0x1a>
		//String is array of characters and last element is null character
	{
		USART_voidSend(Copy_pcString[local_u8Counter]);
		local_u8Counter++;
	}
	UDR = *Copy_pcString;
     d22:	ac e2       	ldi	r26, 0x2C	; 44
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	80 81       	ld	r24, Z
     d2c:	8c 93       	st	X, r24
	return Copy_pcString;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <USART_voidSendString>:


void USART_voidSendString(const char* Copy_pcString)

{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <USART_voidSendString+0x6>
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	9b 83       	std	Y+3, r25	; 0x03
     d4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Counter=0;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     d50:	eb e2       	ldi	r30, 0x2B	; 43
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 95       	swap	r24
     d58:	86 95       	lsr	r24
     d5a:	87 70       	andi	r24, 0x07	; 7
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	81 70       	andi	r24, 0x01	; 1
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	a1 f3       	breq	.-24     	; 0xd50 <USART_voidSendString+0x12>
     d68:	0e c0       	rjmp	.+28     	; 0xd86 <USART_voidSendString+0x48>
	while(Copy_pcString[local_u8Counter]!= '\0')//an array containing the characters and terminated with a '\0' character
		//String is array of characters and last element is null character
	{
		USART_voidSend(Copy_pcString[local_u8Counter]);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	80 81       	ld	r24, Z
     d7c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		local_u8Counter++;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	89 83       	std	Y+1, r24	; 0x01
void USART_voidSendString(const char* Copy_pcString)

{
	u8 local_u8Counter=0;
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
	while(Copy_pcString[local_u8Counter]!= '\0')//an array containing the characters and terminated with a '\0' character
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	fc 01       	movw	r30, r24
     d92:	e2 0f       	add	r30, r18
     d94:	f3 1f       	adc	r31, r19
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	39 f7       	brne	.-50     	; 0xd6a <USART_voidSendString+0x2c>
		//String is array of characters and last element is null character
	{
		USART_voidSend(Copy_pcString[local_u8Counter]);
		local_u8Counter++;
	}
	UDR= *Copy_pcString;
     d9c:	ec e2       	ldi	r30, 0x2C	; 44
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	aa 81       	ldd	r26, Y+2	; 0x02
     da2:	bb 81       	ldd	r27, Y+3	; 0x03
     da4:	8c 91       	ld	r24, X
     da6:	80 83       	st	Z, r24
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <gets_UART1>:

void gets_UART1(unsigned char *string)  //Receive a character until carriage return or newline
{
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <gets_UART1+0xa>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <gets_UART1+0xc>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char i=0,J=0;
     dc8:	1a 82       	std	Y+2, r1	; 0x02
     dca:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		string[i]= USART_u8Receive();
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	8c 01       	movw	r16, r24
     dd8:	02 0f       	add	r16, r18
     dda:	13 1f       	adc	r17, r19
     ddc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <USART_u8Receive>
     de0:	f8 01       	movw	r30, r16
     de2:	80 83       	st	Z, r24
		J = string[i];
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	80 81       	ld	r24, Z
     df6:	89 83       	std	Y+1, r24	; 0x01
		i++;
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	8a 83       	std	Y+2, r24	; 0x02
	}
	while((J!='\0') && (J!='\r'));  //while no Line Feed or Carriage Return
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	88 23       	and	r24, r24
     e02:	19 f0       	breq	.+6      	; 0xe0a <gets_UART1+0x56>
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8d 30       	cpi	r24, 0x0D	; 13
     e08:	09 f7       	brne	.-62     	; 0xdcc <gets_UART1+0x18>
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <UARTINT_voidSetCallBack>:
 *(string+i) = '\0';
}
 */
static void (*UARTINT_ApfuncUARTINT)(void);
void UARTINT_voidSetCallBack(void(*Copy_pfun)(void))
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <UARTINT_voidSetCallBack+0x6>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	UARTINT_ApfuncUARTINT = Copy_pfun;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	90 93 65 02 	sts	0x0265, r25
     e32:	80 93 64 02 	sts	0x0264, r24
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <__vector_13>:
//USART, Rx Complete
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	UARTINT_ApfuncUARTINT();
     e6a:	e0 91 64 02 	lds	r30, 0x0264
     e6e:	f0 91 65 02 	lds	r31, 0x0265
     e72:	09 95       	icall
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <enable_UART_Int>:

/*Enable Rx Interrupt*/
void enable_UART_Int(void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RX); //RXCIE: RX Complete Interrupt Enable
     ea2:	aa e2       	ldi	r26, 0x2A	; 42
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e2       	ldi	r30, 0x2A	; 42
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	8c 93       	st	X, r24
	SET_BIT(UCSRA,UCSRA_RXC); //RXCIE: RX Complete Interrupt Enable
     eb0:	ab e2       	ldi	r26, 0x2B	; 43
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e2       	ldi	r30, 0x2B	; 43
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 68       	ori	r24, 0x80	; 128
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <main>:
int Str[8];

u8 light_flag=0;
u8 fan_flag=0;
void main (void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <main+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <main+0x8>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();      //Rx input (PD0) and Tx output (PD1)
     ed0:	0e 94 85 04 	call	0x90a	; 0x90a <PORT_voidInit>
	GIE_voidEnable();     // enable global interrupt
     ed4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <GIE_voidEnable>
	ADC_voidInit();
     ed8:	0e 94 bc 01 	call	0x378	; 0x378 <ADC_voidInit>
	u16 App_u16ADCReading_light;
	u16 App_u16ADCReading_fan;
	TIMER1_voidInit();
     edc:	0e 94 72 05 	call	0xae4	; 0xae4 <TIMER1_voidInit>
	TIMER0_voidInit();
     ee0:	0e 94 a8 04 	call	0x950	; 0x950 <TIMER0_voidInit>
	ICR1 = 19999;
     ee4:	e6 e4       	ldi	r30, 0x46	; 70
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	8f e1       	ldi	r24, 0x1F	; 31
     eea:	9e e4       	ldi	r25, 0x4E	; 78
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
	OCR1B = 0;
     ef0:	e8 e4       	ldi	r30, 0x48	; 72
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	11 82       	std	Z+1, r1	; 0x01
     ef6:	10 82       	st	Z, r1
	TIMER0_voidSetCompareMatchValue(0);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <TIMER0_voidSetCompareMatchValue>
	USART_voidInit();
     efe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <USART_voidInit>
	USART_voidSend('\n');
     f02:	8a e0       	ldi	r24, 0x0A	; 10
     f04:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	USART_voidSend('\r');
     f08:	8d e0       	ldi	r24, 0x0D	; 13
     f0a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	UART_Send_String("UART Module Initialized and Active");
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
	USART_voidSend('\n');
     f16:	8a e0       	ldi	r24, 0x0A	; 10
     f18:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	USART_voidSend('\r');
     f1c:	8d e0       	ldi	r24, 0x0D	; 13
     f1e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	pin_check();
     f22:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <pin_check>
	enable_UART_Int();
     f26:	0e 94 4d 07 	call	0xe9a	; 0xe9a <enable_UART_Int>

	while(1)
	{

		ADC_u8StartConversionSynch(SINGLE_ENDED_ADC3, &App_u16ADCReading_fan);  //ADC Synchronous mode - thermal sensor
     f2a:	9e 01       	movw	r18, r28
     f2c:	2d 5f       	subi	r18, 0xFD	; 253
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	b9 01       	movw	r22, r18
     f34:	0e 94 49 00 	call	0x92	; 0x92 <ADC_u8StartConversionSynch>
		ADC_u8StartConversionSynch(SINGLE_ENDED_ADC2, &App_u16ADCReading_light);  //ADC Synchronous mode - LDR
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	9e 01       	movw	r18, r28
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	b9 01       	movw	r22, r18
     f42:	0e 94 49 00 	call	0x92	; 0x92 <ADC_u8StartConversionSynch>
		if (fan_flag==1)
     f46:	80 91 67 02 	lds	r24, 0x0267
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	49 f4       	brne	.+18     	; 0xf60 <main+0x9c>
		{
			TIMER0_voidSetCompareMatchValue(App_u16ADCReading_fan/4);   //output is on OC0 which is pin PB3
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <TIMER0_voidSetCompareMatchValue>
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <main+0xaa>
		}
		else if (fan_flag==0)
     f60:	80 91 67 02 	lds	r24, 0x0267
     f64:	88 23       	and	r24, r24
     f66:	19 f4       	brne	.+6      	; 0xf6e <main+0xaa>
		{
			TIMER0_voidSetCompareMatchValue(0);    //output is on OC0 which is pin PB3
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <TIMER0_voidSetCompareMatchValue>
		}
		if (light_flag==1)
     f6e:	80 91 66 02 	lds	r24, 0x0266
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	49 f4       	brne	.+18     	; 0xf88 <main+0xc4>
		{
			OCR1B = App_u16ADCReading_light-384;   //output is on OC1B which is pin PD4
     f76:	e8 e4       	ldi	r30, 0x48	; 72
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	80 58       	subi	r24, 0x80	; 128
     f80:	91 40       	sbci	r25, 0x01	; 1
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <main+0xd4>
		}

		else if(light_flag==0)
     f88:	80 91 66 02 	lds	r24, 0x0266
     f8c:	88 23       	and	r24, r24
     f8e:	21 f4       	brne	.+8      	; 0xf98 <main+0xd4>
		{
			OCR1B = 0;                       //output is on OC1B which is pin PD4
     f90:	e8 e4       	ldi	r30, 0x48	; 72
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	10 82       	st	Z, r1
		}

		UARTINT_voidSetCallBack(&get_input);
     f98:	81 ed       	ldi	r24, 0xD1	; 209
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <UARTINT_voidSetCallBack>
     fa0:	c4 cf       	rjmp	.-120    	; 0xf2a <main+0x66>

00000fa2 <get_input>:
	}
}

void get_input(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	gets_UART1(Str);
     faa:	88 e6       	ldi	r24, 0x68	; 104
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 da 06 	call	0xdb4	; 0xdb4 <gets_UART1>
	if((strncmp(Str, fanon, 5))==0)
     fb2:	88 e6       	ldi	r24, 0x68	; 104
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	2c ef       	ldi	r18, 0xFC	; 252
     fb8:	31 e0       	ldi	r19, 0x01	; 1
     fba:	b9 01       	movw	r22, r18
     fbc:	45 e0       	ldi	r20, 0x05	; 5
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	41 f4       	brne	.+16     	; 0xfd8 <get_input+0x36>
	{
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH); //fan ON;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		cursor();
     fd2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
     fd6:	e3 c0       	rjmp	.+454    	; 0x119e <get_input+0x1fc>
	}

	else if((strncmp(Str, fanoff, 6))==0)
     fd8:	88 e6       	ldi	r24, 0x68	; 104
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	22 e0       	ldi	r18, 0x02	; 2
     fde:	32 e0       	ldi	r19, 0x02	; 2
     fe0:	b9 01       	movw	r22, r18
     fe2:	46 e0       	ldi	r20, 0x06	; 6
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	41 f4       	brne	.+16     	; 0xffe <get_input+0x5c>
	{
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_LOW); //fan OFF
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		cursor();
     ff8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
     ffc:	d0 c0       	rjmp	.+416    	; 0x119e <get_input+0x1fc>
	}

	else if((strncmp(Str, lighton, 7))==0)
     ffe:	88 e6       	ldi	r24, 0x68	; 104
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	2b ee       	ldi	r18, 0xEB	; 235
    1004:	31 e0       	ldi	r19, 0x01	; 1
    1006:	b9 01       	movw	r22, r18
    1008:	47 e0       	ldi	r20, 0x07	; 7
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	41 f4       	brne	.+16     	; 0x1024 <get_input+0x82>
	{
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_HIGH); //Light ON;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		cursor();
    101e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    1022:	bd c0       	rjmp	.+378    	; 0x119e <get_input+0x1fc>
	}

	else if((strncmp(Str, lightoff, 8))==0)
    1024:	88 e6       	ldi	r24, 0x68	; 104
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	23 ef       	ldi	r18, 0xF3	; 243
    102a:	31 e0       	ldi	r19, 0x01	; 1
    102c:	b9 01       	movw	r22, r18
    102e:	48 e0       	ldi	r20, 0x08	; 8
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	41 f4       	brne	.+16     	; 0x104a <get_input+0xa8>
	{
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_LOW); //Light OFF;
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		cursor();
    1044:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    1048:	aa c0       	rjmp	.+340    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, opendoor, 8))==0)
    104a:	88 e6       	ldi	r24, 0x68	; 104
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	29 e0       	ldi	r18, 0x09	; 9
    1050:	32 e0       	ldi	r19, 0x02	; 2
    1052:	b9 01       	movw	r22, r18
    1054:	48 e0       	ldi	r20, 0x08	; 8
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	39 f4       	brne	.+14     	; 0x106e <get_input+0xcc>
	{
		Servo_Motor(90); //open door;
    1060:	8a e5       	ldi	r24, 0x5A	; 90
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 3b 09 	call	0x1276	; 0x1276 <Servo_Motor>
		cursor();
    1068:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    106c:	98 c0       	rjmp	.+304    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, closedoor, 9))==0)
    106e:	88 e6       	ldi	r24, 0x68	; 104
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	22 e1       	ldi	r18, 0x12	; 18
    1074:	32 e0       	ldi	r19, 0x02	; 2
    1076:	b9 01       	movw	r22, r18
    1078:	49 e0       	ldi	r20, 0x09	; 9
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	39 f4       	brne	.+14     	; 0x1092 <get_input+0xf0>
	{
		Servo_Motor(0); //close door;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 3b 09 	call	0x1276	; 0x1276 <Servo_Motor>
		cursor();
    108c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    1090:	86 c0       	rjmp	.+268    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, smartlighton, 12))==0)
    1092:	88 e6       	ldi	r24, 0x68	; 104
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	2c e1       	ldi	r18, 0x1C	; 28
    1098:	32 e0       	ldi	r19, 0x02	; 2
    109a:	b9 01       	movw	r22, r18
    109c:	4c e0       	ldi	r20, 0x0C	; 12
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	31 f4       	brne	.+12     	; 0x10b4 <get_input+0x112>
	{
		light_flag=1;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 66 02 	sts	0x0266, r24
		cursor();
    10ae:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    10b2:	75 c0       	rjmp	.+234    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, smartlightoff, 13))==0)
    10b4:	88 e6       	ldi	r24, 0x68	; 104
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	29 e2       	ldi	r18, 0x29	; 41
    10ba:	32 e0       	ldi	r19, 0x02	; 2
    10bc:	b9 01       	movw	r22, r18
    10be:	4d e0       	ldi	r20, 0x0D	; 13
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <get_input+0x132>
	{
		light_flag=0;
    10ca:	10 92 66 02 	sts	0x0266, r1
		cursor();
    10ce:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    10d2:	65 c0       	rjmp	.+202    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, smartfanon, 10))==0)
    10d4:	88 e6       	ldi	r24, 0x68	; 104
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	27 e3       	ldi	r18, 0x37	; 55
    10da:	32 e0       	ldi	r19, 0x02	; 2
    10dc:	b9 01       	movw	r22, r18
    10de:	4a e0       	ldi	r20, 0x0A	; 10
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <get_input+0x154>
	{
		fan_flag=1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 67 02 	sts	0x0267, r24
		cursor();
    10f0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    10f4:	54 c0       	rjmp	.+168    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, smartfanoff, 10))==0)
    10f6:	88 e6       	ldi	r24, 0x68	; 104
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	22 e4       	ldi	r18, 0x42	; 66
    10fc:	32 e0       	ldi	r19, 0x02	; 2
    10fe:	b9 01       	movw	r22, r18
    1100:	4a e0       	ldi	r20, 0x0A	; 10
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	29 f4       	brne	.+10     	; 0x1116 <get_input+0x174>
	{
		fan_flag=0;
    110c:	10 92 67 02 	sts	0x0267, r1
		cursor();
    1110:	0e 94 60 09 	call	0x12c0	; 0x12c0 <cursor>
    1114:	44 c0       	rjmp	.+136    	; 0x119e <get_input+0x1fc>
	}
	else if((strncmp(Str, exit, 4))==0)
    1116:	88 e6       	ldi	r24, 0x68	; 104
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	2e e4       	ldi	r18, 0x4E	; 78
    111c:	32 e0       	ldi	r19, 0x02	; 2
    111e:	b9 01       	movw	r22, r18
    1120:	44 e0       	ldi	r20, 0x04	; 4
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	29 f5       	brne	.+74     	; 0x1176 <get_input+0x1d4>
	{
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_LOW); //fan OFF
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		DIO_u8SetPinValue (DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_LOW); //Light OFF;
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_u8SetPinValue>
		Servo_Motor(0); //close door;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 3b 09 	call	0x1276	; 0x1276 <Servo_Motor>
		fan_flag=0;
    1148:	10 92 67 02 	sts	0x0267, r1
		light_flag=0;
    114c:	10 92 66 02 	sts	0x0266, r1
		USART_voidSend('\n');
    1150:	8a e0       	ldi	r24, 0x0A	; 10
    1152:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		USART_voidSend('\r');
    1156:	8d e0       	ldi	r24, 0x0D	; 13
    1158:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		UART_Send_String("UART Module Initialized and Active");
    115c:	80 e6       	ldi	r24, 0x60	; 96
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
		USART_voidSend('\n');
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		USART_voidSend('\r');
    116a:	8d e0       	ldi	r24, 0x0D	; 13
    116c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		pin_check();
    1170:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <pin_check>
    1174:	14 c0       	rjmp	.+40     	; 0x119e <get_input+0x1fc>
	}
	else
	{
		USART_voidSend('\r');        //ASCII value 10 is used for carriage return (to print a new line)
    1176:	8d e0       	ldi	r24, 0x0D	; 13
    1178:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		USART_voidSend('\n');
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		UART_Send_String("Wrong command");
    1182:	83 e8       	ldi	r24, 0x83	; 131
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
		USART_voidSend('\r');        //ASCII value 10 is used for carriage return (to print a new line)
    118a:	8d e0       	ldi	r24, 0x0D	; 13
    118c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		USART_voidSend('\n');
    1190:	8a e0       	ldi	r24, 0x0A	; 10
    1192:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		UART_Send_String("Smart_Home>>");
    1196:	81 e9       	ldi	r24, 0x91	; 145
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
	}
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <pin_check>:


void pin_check (void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	0f 92       	push	r0
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	u8 trials=0;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		UART_Send_String("Enter PIN: ");
    11b0:	8e e9       	ldi	r24, 0x9E	; 158
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
		gets_UART1(Str);   //get password
    11b8:	88 e6       	ldi	r24, 0x68	; 104
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <gets_UART1>
		if((strncmp(Str, password, 4))==0)
    11c0:	88 e6       	ldi	r24, 0x68	; 104
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	26 ee       	ldi	r18, 0xE6	; 230
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	b9 01       	movw	r22, r18
    11ca:	44 e0       	ldi	r20, 0x04	; 4
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strncmp>
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f5       	brne	.+90     	; 0x1230 <pin_check+0x8c>
		{
			UART_Send_String("Welcome to Smart Home Application");
    11d6:	8a ea       	ldi	r24, 0xAA	; 170
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
			USART_voidSend('\n');
    11de:	8a e0       	ldi	r24, 0x0A	; 10
    11e0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			USART_voidSend('\r');
    11e4:	8d e0       	ldi	r24, 0x0D	; 13
    11e6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			UART_Send_String("                            List of commands             ");
    11ea:	8c ec       	ldi	r24, 0xCC	; 204
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
			USART_voidSend('\n');
    11f2:	8a e0       	ldi	r24, 0x0A	; 10
    11f4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			USART_voidSend('\r');
    11f8:	8d e0       	ldi	r24, 0x0D	; 13
    11fa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			UART_Send_String("lighton           lightoff         opendoor       closedoor      fanon    fanoff");
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
			USART_voidSend('\n');
    1206:	8a e0       	ldi	r24, 0x0A	; 10
    1208:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			USART_voidSend('\r');
    120c:	8d e0       	ldi	r24, 0x0D	; 13
    120e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			UART_Send_String("smartlighton      smartlighton     smartfanon     smartfanoff     exit");
    1212:	87 e5       	ldi	r24, 0x57	; 87
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
			USART_voidSend('\n');
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			USART_voidSend('\r');
    1220:	8d e0       	ldi	r24, 0x0D	; 13
    1222:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			UART_Send_String("Smart_Home>>");
    1226:	81 e9       	ldi	r24, 0x91	; 145
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
    122e:	11 c0       	rjmp	.+34     	; 0x1252 <pin_check+0xae>
			break;
		}
		else
		{
			trials++;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	89 83       	std	Y+1, r24	; 0x01
			UART_Send_String("Wrong password, please try again - remaining trials: ");
    1236:	8e e9       	ldi	r24, 0x9E	; 158
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
			USART_voidSend('\n');
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
			USART_voidSend('\r');
    1244:	8d e0       	ldi	r24, 0x0D	; 13
    1246:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		}
	}while(trials<3);
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	08 f4       	brcc	.+2      	; 0x1252 <pin_check+0xae>
    1250:	af cf       	rjmp	.-162    	; 0x11b0 <pin_check+0xc>

	if (trials==3)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	59 f4       	brne	.+22     	; 0x126e <pin_check+0xca>
	{
		USART_voidSend('\n');
    1258:	8a e0       	ldi	r24, 0x0A	; 10
    125a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		USART_voidSend('\r');
    125e:	8d e0       	ldi	r24, 0x0D	; 13
    1260:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
		UART_Send_String("Account locked !!");
    1264:	84 ed       	ldi	r24, 0xD4	; 212
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
    126c:	ff cf       	rjmp	.-2      	; 0x126c <pin_check+0xc8>
		for(;;);
	}
}
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <Servo_Motor>:

/* Servo Motor (Limited) function using Timer1
 * Argument: angle in degrees between 0 to 180  */
void Servo_Motor(u8 rotation_angle)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = 19999;
    1282:	e6 e4       	ldi	r30, 0x46	; 70
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8f e1       	ldi	r24, 0x1F	; 31
    1288:	9e e4       	ldi	r25, 0x4E	; 78
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
	OCR1A = 449 + ((2050/180) * rotation_angle);   //output is on OC1A which is pin PD5
    128e:	ea e4       	ldi	r30, 0x4A	; 74
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	48 2f       	mov	r20, r24
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	ca 01       	movw	r24, r20
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	9c 01       	movw	r18, r24
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	84 0f       	add	r24, r20
    12ae:	95 1f       	adc	r25, r21
    12b0:	8f 53       	subi	r24, 0x3F	; 63
    12b2:	9e 4f       	sbci	r25, 0xFE	; 254
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	80 83       	st	Z, r24
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <cursor>:
void cursor(void)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	USART_voidSend('\r');        //ASCII value 10 is used for carriage return (to print a new line)
    12c8:	8d e0       	ldi	r24, 0x0D	; 13
    12ca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	USART_voidSend('\n');
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <USART_voidSend>
	UART_Send_String("Smart_Home>>");
    12d4:	81 e9       	ldi	r24, 0x91	; 145
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 27 06 	call	0xc4e	; 0xc4e <UART_Send_String>
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <strncmp>:
    12e2:	fb 01       	movw	r30, r22
    12e4:	dc 01       	movw	r26, r24
    12e6:	41 50       	subi	r20, 0x01	; 1
    12e8:	50 40       	sbci	r21, 0x00	; 0
    12ea:	30 f0       	brcs	.+12     	; 0x12f8 <strncmp+0x16>
    12ec:	8d 91       	ld	r24, X+
    12ee:	01 90       	ld	r0, Z+
    12f0:	80 19       	sub	r24, r0
    12f2:	19 f4       	brne	.+6      	; 0x12fa <strncmp+0x18>
    12f4:	00 20       	and	r0, r0
    12f6:	b9 f7       	brne	.-18     	; 0x12e6 <strncmp+0x4>
    12f8:	88 1b       	sub	r24, r24
    12fa:	99 0b       	sbc	r25, r25
    12fc:	08 95       	ret
